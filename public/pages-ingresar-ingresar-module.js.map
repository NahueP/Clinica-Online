{"version":3,"sources":["./src/app/pages/ingresar/login/login.component.ts","./src/app/pages/ingresar/login/login.component.html","./src/app/pages/ingresar/ingresar-routing.module.ts","./src/app/pages/ingresar/ingresar.module.ts","./src/app/pages/ingresar/register/register.component.ts","./src/app/pages/ingresar/register/register.component.html","./src/app/components/spinner/spinner.component.html","./src/app/components/spinner/spinner.component.ts","./node_modules/ngx-captcha/__ivy_ngcc__/fesm2015/ngx-captcha.js"],"names":[],"mappings":"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AChB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gEAAgE,EAAE;AAClE,oBAAoB;AACpB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,sBAAsB,GAAG;AACzB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,8BAA8B,OAAO,2BAA2B,kCAAkC,UAAU,OAAO,EAAE,gCAAgC;AACrJ;AACA;AACA,wDAAwD,iCAAiC,sDAAe,CAAC,oDAAa,GAAG;AACzH,sBAAsB,gEAAyB,EAAE,oDAAoD;AACrG;AACA;AACA,KAAK,OAAO,oDAAM;AAClB;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,wDAAU;AACxB,KAAK,gBAAgB,UAAU,OAAO,oDAAa,EAAE,EAAE,EAAE,QAAQ,EAAE;AACnE,WAAW,EA4BV;;AAED;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA,wBAAwB,0DAAY;AACpC;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yCAAyC,wDAAS;AAClD;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,oDAAoD,cAAc;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB;AACrB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,0CAA0C,+DAAwB,CAAC,uDAAgB,GAAG,+DAAwB,CAAC,oDAAa,GAAG,+DAAwB,CAAC,sDAAe,GAAG,+DAAwB,iBAAiB;AAC7R,8BAA8B,+DAAwB,EAAE,wCAAwC,uGAAuG,YAAY,qGAAqG,aAAa,kEAA2B,GAAG;AACnW;AACA;AACA,KAAK,OAAO,uDAAS,EAAE;AACvB,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,OAAO,sDAAQ,EAAE;AACtB,KAAK;AACL;AACA;AACA,eAAe,OAAO,mDAAK,EAAE;AAC7B,uBAAuB,OAAO,mDAAK,EAAE;AACrC,YAAY,OAAO,mDAAK,EAAE;AAC1B,UAAU,OAAO,mDAAK,EAAE;AACxB,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,eAAe,OAAO,oDAAM,EAAE;AAC9B,YAAY,OAAO,oDAAM,EAAE;AAC3B,aAAa,OAAO,oDAAM,EAAE;AAC5B,aAAa,OAAO,oDAAM,EAAE;AAC5B,aAAa,OAAO,oDAAM,EAAE;AAC5B,cAAc,OAAO,oDAAM,EAAE;AAC7B;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB,KAAK,gBAAgB,UAAU,OAAO,uDAAgB,EAAE,GAAG,OAAO,oDAAa,EAAE,GAAG,OAAO,sDAAe,EAAE,GAAG,sBAAsB,EAAE,EAAE,GAAG;AAC5I,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;AAChB,WAAW,EA6KV;;AAED;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,+CAA+C,+DAAwB,CAAC,uDAAgB,GAAG,+DAAwB,CAAC,oDAAa,GAAG,+DAAwB,CAAC,sDAAe,GAAG,+DAAwB,iBAAiB;AAC5S,mCAAmC,+DAAwB,EAAE,8IAA8I;AAC3M,QAAQ,yDAAkB;AAC1B,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,WAAW,2CAA2C,aAAa,gEAAyB;AACnG;AACA,yBAAyB,gEAAiB;AAC1C,6BAA6B,gEAAU;AACvC,4BAA4B;AAC5B;AACA;AACA;AACA,YAAY,wEAAiC,EAAE,kEAA2B,8HAA8H;AACxM,QAAQ,uDAAgB;AACxB,KAAK,EAAE,oBAAoB;AAC3B;AACA;AACA,KAAK,OAAO,uDAAS,EAAE;AACvB,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,OAAO,sDAAQ,EAAE;AACtB,KAAK;AACL;AACA;AACA,aAAa,OAAO,mDAAK,EAAE;AAC3B,aAAa,OAAO,mDAAK,EAAE;AAC3B,UAAU,OAAO,mDAAK,EAAE;AACxB,0BAA0B,OAAO,uDAAS,gCAAgC,gBAAgB,IAAI;AAC9F;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gEAAiB;AAClD,qCAAqC,gEAAU;AAC/C,oCAAoC;AACpC;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,uDAAgB,EAAE,GAAG,OAAO,oDAAa,EAAE,GAAG,OAAO,sDAAe,EAAE,GAAG,sBAAsB,EAAE,EAAE,GAAG;AAC5I,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,uDAAS;AAC3B,0CAA0C,gBAAgB;AAC1D,SAAS,GAAG,EAAE,EAAE;AAChB,WAAW,EAiDV;;AAED;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,uCAAuC,+DAAwB,CAAC,uDAAgB,GAAG,+DAAwB,CAAC,oDAAa,GAAG,+DAAwB,CAAC,sDAAe,GAAG,+DAAwB,iBAAiB;AACpR,2BAA2B,+DAAwB,EAAE,qHAAqH;AAC1K,QAAQ,yDAAkB;AAC1B,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,WAAW,yCAAyC,aAAa,gEAAyB;AACjG;AACA,yBAAyB,gEAAiB;AAC1C,6BAA6B,gEAAU;AACvC,4BAA4B;AAC5B;AACA;AACA;AACA,YAAY,wEAAiC,EAAE,kEAA2B,sHAAsH;AAChM,QAAQ,uDAAgB;AACxB,KAAK,EAAE,oBAAoB;AAC3B;AACA;AACA,KAAK,OAAO,uDAAS,EAAE;AACvB,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,OAAO,sDAAQ,EAAE;AACtB,KAAK;AACL;AACA;AACA,aAAa,OAAO,mDAAK,EAAE;AAC3B,YAAY,OAAO,mDAAK,EAAE;AAC1B,UAAU,OAAO,mDAAK,EAAE;AACx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","file":"pages-ingresar-ingresar-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { NgxSpinnerService} from 'ngx-spinner';\nimport { UsuarioFireService } from 'src/app/services/usuario-fire.service';\nimport { Paciente } from 'src/app/clases/paciente';\nimport { Especialista } from 'src/app/clases/especialista';\nimport { Administrador } from 'src/app/clases/administrador';\nimport { Observable } from 'rxjs';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  email: string;\n  password: string;\n  flag : boolean = false;\n\n  pacientes$: Observable<Paciente[]>;\n  especialistas$: Observable<Especialista[]>;\n  administradores$: Observable<Administrador[]>;\n\n  listadoPacientes : Paciente[] = [];\n  listadoEspecialistas : Especialista[] = [];\n  listadoAdministradores : Administrador[] = [];\n\n  pacienteUno : Paciente = new Paciente();\n  pacienteDos : Paciente = new Paciente();;\n  especialistaUno : Especialista = new Especialista();\n  especialistaDos : Especialista = new Especialista();;\n  admin : Administrador = new Administrador();\n\n\n  constructor(private usuariosSvc : UsuarioFireService,private afAuth : AngularFireAuth,private authSvc : AuthService, private router : Router,private spinner: NgxSpinnerService)\n  {\n    this.pacientes$ = this.usuariosSvc.obtenerTodos('pacientes').valueChanges();\n    this.especialistas$ = this.usuariosSvc.obtenerTodos('especialistas').valueChanges();\n    this.administradores$ = this.usuariosSvc.obtenerTodos('administradores').valueChanges();\n  \n  }\n\n\n \n\n\n  async login()\n  {\n  \n\n    try{\n      \n        this.authSvc.SignIn(this.email,this.password).then((res)=>{\n          this.mostrarSpinner(1000);\n          \n      });\n    }\n    catch(error)\n    {\n      console.log(error);\n    }\n  }\n\n \n  accesoRapido(email:string, password:string)\n  {\n    this.email = email;\n    this.password = password;\n  }\n\n\n  mostrarSpinner(seg:number)\n  {\n    this.spinner.show();\n\n    setTimeout(()=>{\n      this.spinner.hide();\n    },seg);\n  }\n\n  ngOnInit(): void {\n    this.mostrarSpinner(1000);\n    \n     \n   \n  }\n\n  \n\n}\n","\n\n<body>\n\n<div class=container>\n<div class=\"row\">\n<div class=\"col-md-4 mx-auto mt-3\">\n<div class=\"card\">\n<div class=\"card-body\">\n    <img src=\"../../../../assets/imagenes/avatar-login.png\" id=\"avatar\">\n    <br><br>\n    <div class=\"form\">\n        <form class=\"form-group\">\n                <div class=\"form-floating mb-3\">\n                    <input type=\"text\" id=\"email\" class=\"form-control\" placeholder=\"name@example.com\" [(ngModel)]=\"email\"  name=\"email\">\n                    <label for=\"floatingInput\">Correo electrónico</label>\n                </div>\n                <div class=\"form-floating mb-3\">\n                    <input type=\"password\" id=\"password\" class=\"form-control\" placeholder=\"contraseña\" [(ngModel)]=\"password\" name=\"password\" >\n                    <label for=\"floatingInput\">Contraseña</label>\n                </div>\n\n                <div class= \"d-grid\">    \n                    <button class=\"btn btn-info btn-lg btn-block\" type=\"button\" (click)=\"login()\">Ingresar</button>\n                </div>\n        </form>\n        <br>\n\n        <ol class=\"list-group\" >\n        <ng-container *ngFor='let paciente of pacientes$ | async | slice:0:2;'>\n            <button type=\"button\" *ngIf='paciente != null' class=\"list-group-item list-group-item-action d-flex justify-content-between align-items-start btn-success\" (click)=\"accesoRapido(paciente.email,paciente.password)\" >\n                <div class=\"ms-2\" >\n                    <img src=\"{{paciente.fotoPerfilUno}}\" height=\"50px\" width=\"50px\" >\n                </div>\n              <div class=\"ms-2 ml-auto\">\n                <div class=\"fw-bold\">{{paciente.nombre}}</div>\n                Paciente\n              </div>\n            </button>\n        </ng-container>\n        <ng-container *ngFor='let especialista of especialistas$ | async | slice:0:2;'>\n            <button type=\"button\" *ngIf='especialista != null' class=\"list-group-item list-group-item-action d-flex justify-content-between align-items-start  btn-info\" (click)=\"accesoRapido(especialista.email,especialista.password)\" >\n                <div class=\"ms-2\" >\n                    <img src=\"{{especialista.fotoPerfil}}\" height=\"50px\" width=\"50px\" >\n                </div>\n              <div class=\"ms-2 ml-auto\">\n                <div class=\"fw-bold\">{{especialista.nombre}}</div>\n                Especialista\n              </div>\n            </button>\n        </ng-container>\n        <ng-container *ngFor='let admin of administradores$ | async | slice:0:1;'>\n            <button type=\"button\"  *ngIf='admin != null' class=\"list-group-item list-group-item-action d-flex justify-content-between align-items-start  btn-warning\" (click)=\"accesoRapido(admin.email,admin.password)\">\n                <div class=\"ms-2\" >\n                    <img src=\"{{admin.fotoPerfil}}\" height=\"50px\" width=\"50px\" >\n                </div>\n                <div class=\"ms-2 ml-auto\">\n                  <div class=\"fw-bold\">{{admin.nombre}}</div>\n                  Administrador\n                </div>\n            </button>\n        </ng-container>\n             \n          </ol>\n\n<!-- \n        <div class= \"d-grid gap-1\">\n            <button class=\"btn btn-outline-success btn-lg btn-block\" type=\"button\"  (click)=\"accesoAdmin()\">Administrador</button>\n            <button class=\"btn btn-outline-warning btn-lg btn-block\" type=\"button\"  (click)=\"accesoPaciente()\">Paciente</button>\n            <button class=\"btn btn-outline-danger btn-lg btn-block\" type=\"button\"  (click)=\"accesoEspecialista()\">Especialista</button>\n        </div> -->\n        <div class=\"form-group mt-3\">\n            <p>\n               <a [routerLink]=\"['/ingresar/register']\" >Crear una cuenta</a>\n            </p>                    \n        </div>\n    </div>\n</div>\n</div>\n</div>\n</div>\n\n</div>\n\n\n</body>\n\n<ngx-spinner\n  bdColor=\"rgba(51,51,51,0.8)\"\n  size=\"medium\"\n  color=\"#fff\"\n  type=\"ball-clip-rotate\"\n></ngx-spinner> ","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\n\nconst routes: Routes = [\n  {path: 'login', component:LoginComponent}, \n  {path: 'register', component:RegisterComponent},\n  {path: '', redirectTo:'login', pathMatch:'full'},\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class IngresarRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IngresarRoutingModule } from './ingresar-routing.module';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { SpinnerComponent } from 'src/app/components/spinner/spinner.component';\nimport { NgxSpinnerModule } from 'ngx-spinner';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {  MatSelectModule } from '@angular/material/select';\nimport { NgxCaptchaModule } from 'ngx-captcha';\n\n \n\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    RegisterComponent,\n    SpinnerComponent\n  ],\n  imports: [\n    CommonModule,\n    IngresarRoutingModule,\n    NgxSpinnerModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatSelectModule,\n    NgxCaptchaModule\n    \n  ]\n})\nexport class IngresarModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { UsuarioFireService } from '../../../services/usuario-fire.service';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Especialidad } from 'src/app/clases/especialidad';\nimport { Paciente } from 'src/app/clases/paciente';\nimport { Administrador } from './../../../clases/administrador';\nimport { Observable } from 'rxjs';\nimport { AngularFireStorage } from '@angular/fire/storage';\nimport { Especialista } from 'src/app/clases/especialista';\nimport { NgxSpinnerService} from 'ngx-spinner';\nimport  Swal  from \"sweetalert2\";\nimport firebase from 'firebase/app';\nimport { AlertService } from 'src/app/services/alert.service';\n\n// import * as firebase from 'firebase';\n\n\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  flag: boolean = false;\n  paciente : Paciente = new Paciente();\n  especialidades : Especialidad = new Especialidad();\n  admin : Administrador = new Administrador();\n  especialista: Especialista = new Especialista();\n  especialidadFlag : boolean = false;\n\n\n  ocultarBtn : boolean = false;\n  listaEspecialidad = [];\n  especialidadSeleccionada : string;\n\n  spinnerFlag:boolean = true;\n  tipo:string = 'Seleccione tipo de alta';\n\n  public foto1: any;\n  public foto2: any;\n  public fotoCargada1: any;\n  public fotoCargada2: any;\n \n\n\n  public formEspecialista!: FormGroup;\n  public formPaciente! : FormGroup;\n\n  siteKey: string = \"6Lcno_oaAAAAAL-GGak1f0v8vc5_V2yaq4wSu7RC\";\n\n  especialidadesFire$: Observable<Especialidad[]>;\n\n  constructor(private authSvc : AuthService,private router: Router,private fireSvc: UsuarioFireService,private fb:FormBuilder,private storage: AngularFireStorage, private spinner : NgxSpinnerService, private alerts : AlertService) \n  {\n      this.especialidadesFire$ = this.fireSvc.obtenerTodos('especialidades').valueChanges();\n  }\n\n  \n \n  \n\n   ngOnInit(): void {\n\n    this.mostrarSpinner(1000);\n\n    \n\n    this.formPaciente = this.fb.group(\n      {\n      'nombre': ['',[Validators.required]],\n      'apellido': ['',Validators.required],\n      'edad': ['',[Validators.required,Validators.min(18),Validators.max(99)]],\n      'dni': ['',[Validators.required,Validators.min(11111111),Validators.max(99999999)]],\n      'obraSocial': ['', Validators.required],\n      'email': ['',[Validators.required, Validators.email,Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]],\n      'password': ['',[Validators.required, Validators.minLength(6)]],\n      'fotoPerfilUno': ['',Validators.required],\n      'fotoPerfilDos': ['',Validators.required],\n      'recaptcha': ['', Validators.required]\n\n      }\n    )\n\n    this.formEspecialista = this.fb.group({\n      'nombre': ['',[Validators.required]],\n      'apellido': ['',Validators.required],\n      'edad': ['',[Validators.required,Validators.min(18),Validators.max(99)]],\n      'dni': ['',[Validators.required,Validators.min(11111111),Validators.max(99999999)]],\n      'email': ['',[Validators.required, Validators.email,Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]],\n      'password': ['',[Validators.required,Validators.minLength(6)]],\n      'fotoPerfilUno': ['',Validators.required],\n      'especialidad': ['', Validators.required],\n      'especialidadInput': [''],\n      'recaptcha': ['', Validators.required]\n      \n      \n      \n    });\n  }\n\n  \n\n\n  \n  async register()\n  {\n    \n    if(this.tipo == \"paciente\")\n    {\n      this.paciente.nombre = this.formPaciente.get('nombre').value;\n      this.paciente.apellido = this.formPaciente.get('apellido').value;\n      this.paciente.edad = this.formPaciente.get('edad').value;\n      this.paciente.dni = this.formPaciente.get('dni').value;\n      this.paciente.email = this.formPaciente.get('email').value;\n      this.paciente.password = this.formPaciente.get('password').value;\n      this.paciente.obraSocial = this.formPaciente.get('obraSocial').value;      \n      this.paciente.esAdmin = false;\n      \n      try\n      {\n          this.authSvc.Register(this.paciente.email,this.paciente.password, this.paciente.nombre).then(response=>{\n           \n          this.mostrarSpinner(1500);  \n          this.paciente.uid = response.user.uid;\n          let id = response.user.email;\n               \n          if(this.foto1 && this.foto2)\n          {\n            const filePath = `/pacientes/${id}/perfil1.png`;\n            const ref = this.storage.ref(filePath);\n            const taks = this.storage.upload(filePath, this.foto1).then(()=>{\n\n             const filePath2 = `/pacientes/${id}/perfil2.png`;\n              const ref2 = this.storage.ref(filePath2);\n\n              const taks2 = this.storage.upload(filePath2, this.foto2).then(()=>{\n\n                 let storages = firebase.storage();\n                 let storageRef = storages.ref();\n                 let spaceRef = storageRef.child(filePath);\n\n                 let storages2 = firebase.storage();\n                 let storageRef2 = storages2.ref();\n                 let spaceRef2 = storageRef2.child(filePath2);\n\n                 spaceRef.getDownloadURL().then(url=>{\n                   this.fotoCargada1 = url;\n                   this.fotoCargada1 = `${this.fotoCargada1}`;\n\n                   console.log(this.fotoCargada1)\n\n\n                   spaceRef2.getDownloadURL().then((url) => {\n                   this.fotoCargada2 = url;\n                   this.fotoCargada2 = `${this.fotoCargada2}`;\n\n                   console.log(this.fotoCargada2);\n\n                   this.paciente.fotoPerfilUno = this.fotoCargada1;\n                   this.paciente.fotoPerfilDos = this.fotoCargada2;\n                   this.fireSvc.crearUsuario('pacientes',JSON.parse(JSON.stringify(this.paciente)));\n\n                   this.authSvc.sendEmailVerification();\n                   this.alerts.mostraAlertaSimple('Se ha registrado exitosamente!','Cuenta Registrada','success');\n                   this.formPaciente.reset();\n                   this.router.navigateByUrl('/ingresar/login');\n                 });\n                 });\n               });\n            });\n            \n          }\n        });\n        \n       \n      }\n       catch(error)\n       {\n         console.log(error);\n        \n       }\n      \n\n    }\n    else\n    {\n      if(this.tipo == \"especialista\")\n      {\n        this.especialista.nombre = this.formEspecialista.get('nombre').value;\n        this.especialista.apellido = this.formEspecialista.get('apellido').value;\n        this.especialista.edad = this.formEspecialista.get('edad').value;\n        this.especialista.dni = this.formEspecialista.get('dni').value;\n        this.especialista.email = this.formEspecialista.get('email').value;\n        this.especialista.password = this.formEspecialista.get('password').value;\n        this.especialista.fotoPerfil = this.formEspecialista.get('fotoPerfilUno').value;\n        this.especialista.especialidad = this.formEspecialista.get('especialidad').value;\n        this.especialista.aprobado = false;\n        this.especialista.esAdmin = false;\n\n         try\n         {\n          this.authSvc.Register(this.especialista.email,this.especialista.password,this.especialista.nombre).then(response=>{\n           \n            this.mostrarSpinner(1500);  \n            this.especialista.uid = response.user.uid;\n            let id = response.user.email;\n                 \n            if(this.foto1)\n            {\n              const filePath = `/especialistas/${id}/perfil.png`;\n              const ref = this.storage.ref(filePath);\n              const taks = this.storage.upload(filePath, this.foto1).then(()=>{\n  \n                let storages = firebase.storage();\n                let storageRef = storages.ref();\n                let spaceRef = storageRef.child(filePath);\n\n                spaceRef.getDownloadURL().then(url=>{\n                  this.fotoCargada1 = url;\n                  this.fotoCargada1 = `${this.fotoCargada1}`;\n\n                  console.log(this.fotoCargada1);\n\n                  this.especialista.fotoPerfil = this.fotoCargada1;\n                \n                   this.fireSvc.crearUsuario('especialistas',JSON.parse(JSON.stringify(this.especialista)));\n\n                   this.authSvc.sendEmailVerification();\n                   this.alerts.mostraAlertaSimple('Se ha registrado exitosamente!','Cuenta Registrada','success');\n                   this.formEspecialista.reset();\n                   this.router.navigateByUrl('/ingresar/login');\n\n                });\n      \n              });\n              \n            }\n          });\n\n         }\n         catch(error)\n         {\n           console.log(error);\n          \n         }\n\n      }\n    }\n  \n  }\n\n\n  \n  \n\n  agregarEspecialidad(){\n    let espAux = new Especialidad();\n    let minus : string = this.formEspecialista.get('especialidadInput').value;\n    let nombre : string;\n    \n    nombre = minus.toLowerCase();\n    espAux.nombre = nombre.charAt(0).toUpperCase() + nombre.slice(1);\n    let existe : boolean = true;\n    \n    \n\n    this.especialidadesFire$.subscribe(esp=>{\n      esp.forEach((especialidad):any =>{\n\n        if(existe)\n        {\n         if(especialidad.nombre == espAux.nombre)\n         { \n          existe = false;\n         }\n        }\n      \n      })\n\n      if(existe != false)\n      {\n        this.fireSvc.crearUsuario('especialidades',JSON.parse(JSON.stringify(espAux)));\n        console.log(\"Especialidad Agregada\");\n        Swal.fire({\n          position: 'top-end',\n          icon: 'success',\n          title: 'Especialidad agregada!',\n          showConfirmButton: false,\n          timer: 1000\n        })\n        this.formEspecialista.get('especialidadInput').reset();\n      }\n    })\n  \n    \n  }\n  \n \n  mostrarAgregarEspecialidad()\n  {\n    this.especialidadFlag = true;\n  }\n\n \n\n   cambiarTipo(tipo : string)\n   {\n     if(tipo == 'paciente' )\n     {\n       this.tipo = 'paciente';\n       this.ocultarBtn = true;\n       this.formEspecialista.reset();\n     }\n     else\n     {\n       if(tipo=='especialista')\n       {\n         this.tipo = 'especialista';\n         this.ocultarBtn = true;\n         this.formPaciente.reset();\n       }\n       else\n       {\n         if(tipo == 'ninguno')\n         {\n           this.tipo=\"ninguno\";\n           this.formPaciente.reset();\n           this.formEspecialista.reset();\n           this.ocultarBtn = false;\n         }\n         \n       }\n     }\n\n     \n   }\n\n\n  \n \n  onUploadEspecialista($event) {\n    console.log($event)\n    this.foto1 = $event.target.files[0];\n\n\n  }\n\n  onUploadPaciente($event, num: number) {\n\n    if (num == 1) {\n      console.log($event)\n      this.foto1 = $event.target.files[0];\n    }\n\n    else if (num == 2) {\n      console.log($event)\n      this.foto2 = $event.target.files[0];\n    }\n  }\n\n  mostrarSpinner(seg : number)\n  {\n    this.spinner.show();\n\n    setTimeout(()=>{\n      this.spinner.hide();\n    },seg);\n  }\n  \n  \n \n}\n","\n<body>\n\n<div class=container>\n    <div class=\"row\">\n<div class=\"col-md-6 mx-auto mt-4\">\n<div class=\"card\">\n<div class=\"card-body\">\n         <p *ngIf=\"!ocultarBtn\">\n          <button  class=\"btnAlta \"  (click)=\"cambiarTipo('paciente')\" id=\"btnPac\">Paciente</button>\n         \n          <button  class=\"btnAlta \"  (click)=\"cambiarTipo('especialista')\" id=\"btnEsp\" >Especialista</button>\n        </p>\n        <div *ngIf='ocultarBtn' style=\"text-align: start;\">\n            <button  class=\"btn btn-secondary btn-sm\"  (click)=\"cambiarTipo('ninguno')\" >🡰</button>\n        </div>\n    \n     <div class=\"formPacientes\" *ngIf=\"tipo === 'paciente'\" > \n        <h4>Formulario Paciente</h4>\n        <form  [formGroup]=\"formPaciente\" [hidden]=\"flag\" class=\"register-form needs-validation\" novalidate (ngSubmit)=\"register()\">\n            <div class=\"cardPacientes\">\n                <div class=\"row\">\n                    <div class=\"col-md-6 mb-3\">\n                       \n                        <input type=\"text\" placeholder=\"Nombre\" name=\"nombre\" class=\"form-control\" id=\"nombre\" formControlName=\"nombre\"/>\n                        <small class=\"invalid\" *ngIf=\"formPaciente.get('nombre')?.errors?.required && formPaciente.get('nombre')?.touched\">Nombre requerido</small>\n                        \n                    </div>\n                    <div class=\"col-md-6 mb-3\">\n                        <input type=\"text\" placeholder=\"Apellido\" name=\"apellido\" class=\"form-control\" id=\"apellido\" formControlName=\"apellido\"/>\n                        <small class=\"invalid\" *ngIf=\"formPaciente.get('apellido')?.errors?.required && formPaciente.get('apellido')?.touched\">Apellido requerido</small>\n                        \n                    </div>\n                </div>\n\n                <div class=\"row\">\n\n                    <div class=\"col-md-6 mb-3\">\n                        <input type=\"number\" placeholder=\"Edad\" name=\"edad\" class=\"form-control\" id=\"edad\" formControlName=\"edad\"/>\n                        <small class=\"invalid\" *ngIf=\"formPaciente.get('edad')?.errors?.required && formPaciente.get('edad')?.touched\">Edad requerida</small>\n                        <small class=\"invalid\" *ngIf=\"formPaciente.get('edad')?.errors?.min || formPaciente.get('edad')?.errors?.max && formPaciente.get('edad')?.touched\">Edad entre 18 y 99 años</small>\n\n                    </div>\n                    <div class=\"col-md-6 mb-3\">\n                        <input type=\"number\" placeholder=\"Dni\" name=\"dni\" class=\"form-control\" id=\"dni\" formControlName=\"dni\"/>\n                        <small class=\"invalid\" *ngIf=\"formPaciente.get('dni')?.errors?.required && formPaciente.get('dni')?.touched\">Dni requerido</small>\n                        <small class=\"invalid\" *ngIf=\"formPaciente.get('dni')?.errors?.min || formPaciente.get('dni')?.errors?.max && formPaciente.get('dni')?.touched\">Dni incorrecto</small>\n\n                    </div>\n                </div>\n\n                <div class=\"form-group mb-3\">\n                    <input type=\"text\" placeholder=\"Obra Social\" name=\"obraSocial\" class=\"form-control\" id=\"obraSocial\" formControlName=\"obraSocial\" />\n                    <small class=\"invalid\" *ngIf=\"formPaciente.get('obraSocial')?.errors?.required && formPaciente.get('obraSocial')?.touched\">Obra social requerida</small>\n                </div>\n                <div class=\"form-group mb-3\">\n                    <input type=\"text\" placeholder=\"Correo\" name=\"email\" class=\"form-control\" id=\"email\" formControlName=\"email\"/>\n                    <small class=\"invalid\" *ngIf=\"formPaciente.get('email')?.errors?.required && formPaciente.get('email')?.touched\">Correo requerido</small>\n                </div>\n                <div class=\"form-group mb-3\">\n                    <input type=\"password\" placeholder=\"Contraseña\" name=\"password\" class=\"form-control\" id=\"password\" formControlName=\"password\"/>\n                    <ng-container *ngIf= \"formPaciente.get('password')?.touched || formPaciente.get('password')?.dirty\" >\n                    <small class=\"invalid\" *ngIf=\"formPaciente.get('password')?.errors?.required \">Contraseña requerida</small>\n                    <small class=\"invalid\" *ngIf=\"formPaciente.get('password')?.errors?.minlength\">6 caracteres como minimo</small>\n                    </ng-container>\n                </div>\n                <div class=\"form-group mb-3\">\n                    <label for=\"formFile\" class=\"form-label mt-1\">Seleccione foto de perfil Uno</label>\n                    <input type=\"file\" class=\"form-control\" id=\"fotoPerfilUno\" formControlName=\"fotoPerfilUno\"  (change)=\"onUploadPaciente($event, 1)\">\n                    <small class=\"invalid\" *ngIf=\"!subirArchivos\">{{mensajeSubida}}</small>\n                </div>\n                <div class=\"form-group mb-3\">\n                    <label for=\"formFile\" class=\"form-label mt-1\">Seleccione foto de perfil Dos</label>\n                    <input type=\"file\" class=\"form-control\" id=\"fotoPerfilDos\" formControlName=\"fotoPerfilDos\"  (change)=\"onUploadPaciente($event, 2)\">\n                    <small class=\"invalid\" *ngIf=\"!subirArchivos\">{{mensajeSubida}}</small>\n                </div>\n                <div class=\"form-group mb-3\" style=\"display: inline-block;\"> \n                    <ngx-recaptcha2 #captchaElem [siteKey]=\"siteKey\" formControlName=\"recaptcha\">\n                    </ngx-recaptcha2>\n                </div>\n            </div>\n            <button class=\"btn btn-success btn-lg btn-block\" type=\"submit\" [disabled]=\"formPaciente.invalid\">Crear cuenta</button>\n        </form>\n        </div>\n\n    <div class=\"formEspecialistas\"  *ngIf=\"tipo === 'especialista'\">\n        <h4>Formulario Especialista</h4>\n        <form  [formGroup]=\"formEspecialista\" [hidden]=\"flag\" class=\"register-form needs-validation\" novalidate (ngSubmit)=\"register()\"> \n            <div class=\"cardEspecialistas\">\n                <div class=\"row\">\n                    <div class=\"col-md-6 mb-3\">\n                       \n                        <input type=\"text\" placeholder=\"Nombre\" name=\"nombre\" class=\"form-control\" id=\"nombre\" formControlName=\"nombre\"/>\n                        <small class=\"invalid\" *ngIf=\"formEspecialista.get('nombre')?.errors?.required && formEspecialista.get('nombre')?.touched\">Nombre requerido</small>\n                        \n                    </div>\n                    <div class=\"col-md-6 mb-3\">\n                        <input type=\"text\" placeholder=\"Apellido\" name=\"apellido\" class=\"form-control\" id=\"apellido\" formControlName=\"apellido\"/>\n                        <small class=\"invalid\" *ngIf=\"formEspecialista.get('apellido')?.errors?.required && formEspecialista.get('apellido')?.touched\">Apellido requerido</small>\n                        \n                    </div>\n                </div>\n\n                <div class=\"row\">\n\n                    <div class=\"col-md-6 mb-3\">\n                        <input type=\"number\" placeholder=\"Edad\" name=\"edad\" class=\"form-control\" id=\"edad\" formControlName=\"edad\"/>\n                        <small class=\"invalid\" *ngIf=\"formEspecialista.get('edad')?.errors?.required && formEspecialista.get('edad')?.touched\">Edad requerida</small>\n                    </div>\n                    <div class=\"col-md-6 mb-3\">\n                        <input type=\"number\" placeholder=\"Dni\" name=\"dni\" class=\"form-control\" id=\"dni\" formControlName=\"dni\"/>\n                        <small class=\"invalid\" *ngIf=\"formEspecialista.get('dni')?.errors?.required && formEspecialista.get('dni')?.touched\">Dni requerido</small>\n                    </div>\n                </div>\n\n                <h5 class=\"mb-3\">Especialidad</h5>\n                <div class=\"row\"  >\n                    <div class=\"form-group mb-3\" >\n                            <mat-form-field>\n                                <mat-label >Seleccionar especialidades</mat-label>\n                                <mat-select matNativeControl  class=\"espeSelect\" multiple=\"\" formControlName=\"especialidad\" >\n    \n                                    <mat-option *ngFor=\"let especialidad of especialidadesFire$ | async\" [value]=\"especialidad.nombre\">{{especialidad.nombre}}</mat-option> \n                                    \n                                </mat-select>\n                            </mat-form-field>\n                            <br>\n                        <button class=\"btn btn-primary\" *ngIf=\"!especialidadFlag\" (click)=\"mostrarAgregarEspecialidad()\">Agregar especialidad</button>\n                        <div class=\"mas\" *ngIf=\"especialidadFlag\">\n                            <input  type=\"text\" placeholder=\"Ingrese especialidad nueva\" name=\"especialidadInput\" class=\"form-control\" id=\"especialidadInput\" [(ngModel)]=\"especialidadInput\" formControlName=\"especialidadInput\"/>\n                            <button type=\"button\" class=\"btn btn-primary\"  (click)=\"agregarEspecialidad()\" [disabled]=\"!especialidadInput\">Agregar</button>\n                        </div>\n                    </div>\n                </div>\n                \n                <div class=\"form-group mb-3\">\n                    <input type=\"text\" placeholder=\"Correo\" name=\"email\" class=\"form-control\" id=\"email\" formControlName=\"email\"/>\n                    <small class=\"invalid\" *ngIf=\"formEspecialista.get('email')?.errors?.required && formEspecialista.get('email')?.touched\">Correo requerido</small>\n                </div>\n                <div class=\"form-group mb-3\">\n                    <input type=\"password\" placeholder=\"Contraseña\" name=\"password\" class=\"form-control\" id=\"password\" formControlName=\"password\"/>\n                    <ng-container *ngIf= \"formEspecialista.get('password')?.touched || formEspecialista.get('password')?.dirty\" >\n                    <small class=\"invalid\" *ngIf=\"formEspecialista.get('password')?.errors?.required && formEspecialista.get('password')?.touched\">Contraseña requerida</small>\n                    <small class=\"invalid\" *ngIf=\"formEspecialista.get('password')?.errors?.minlength && formEspecialista.get('password')?.touched || formEspecialista.get('password')?.dirty\">6 caracteres como minimo</small>\n                    </ng-container>\n                </div>\n                <div class=\"form-group mb-3\">\n                    <label for=\"formFile\" class=\"form-label mt-1\">Seleccione foto de perfil</label>\n                    <input type=\"file\" class=\"form-control\" id=\"fotoPerfilUno\" formControlName=\"fotoPerfilUno\" (change)=\"onUploadEspecialista($event)\">\n                    <small class=\"invalid\" *ngIf=\"!subirArchivos\">{{mensajeSubida}}</small>\n                </div>\n                <div class=\"form-group mb-3\" style=\"display: inline-block;\" > \n                    <ngx-recaptcha2 #captchaElem [siteKey]=\"siteKey\" formControlName=\"recaptcha\">\n                    </ngx-recaptcha2>\n                </div>\n            </div>\n            <button class=\"btn btn-success btn-lg btn-block\" type=\"submit\"  [disabled]=\"formEspecialista.invalid\">Crear cuenta</button>\n        </form>\n    </div>\n\n\n\n            <div class=\"form-group mt-3\">\n                <p >\n                   <a [routerLink]=\"['/ingresar/login']\" style=\"font-size: large;\">Ya tengo una cuenta</a>\n                </p>                    \n            </div>\n        \n</div>\n</div>\n</div>\n</div>\n</div>\n\n\n</body>\n\n<ngx-spinner\n  bdColor=\"rgba(51,51,51,0.8)\"\n  size=\"medium\"\n  color=\"#fff\"\n  type=\"ball-clip-rotate\"\n></ngx-spinner> ","<div class=\"sk-circle\" *ngIf=\"spinner\">\n    <div class=\"sk-circle1 sk-child\"></div>\n    <div class=\"sk-circle2 sk-child\"></div>\n    <div class=\"sk-circle3 sk-child\"></div>\n    <div class=\"sk-circle4 sk-child\"></div>\n    <div class=\"sk-circle5 sk-child\"></div>\n    <div class=\"sk-circle6 sk-child\"></div>\n    <div class=\"sk-circle7 sk-child\"></div>\n    <div class=\"sk-circle8 sk-child\"></div>\n    <div class=\"sk-circle9 sk-child\"></div>\n    <div class=\"sk-circle10 sk-child\"></div>\n    <div class=\"sk-circle11 sk-child\"></div>\n    <div class=\"sk-circle12 sk-child\"></div>\n  </div>","import { Component, OnInit,Input } from '@angular/core';\n\n@Component({\n  selector: 'app-spinner',\n  templateUrl: './spinner.component.html',\n  styleUrls: ['./spinner.component.scss']\n})\nexport class SpinnerComponent implements OnInit {\n\n  @Input()spinner: boolean;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Injectable, NgZone, EventEmitter, Directive, Renderer2, Injector, Input, Output, Component, forwardRef, ViewChild, NgModule } from '@angular/core';\nimport { NgControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/services/script.service.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\n\nconst _c0 = [\"captchaWrapperElem\"];\nclass ScriptService {\r\n    /**\r\n     * @param {?} zone\r\n     */\r\n    constructor(zone) {\r\n        this.zone = zone;\r\n        /**\r\n         * Name of the global google recaptcha script\r\n         */\r\n        this.windowGrecaptcha = 'grecaptcha';\r\n        /**\r\n         * Name of the global callback\r\n         */\r\n        this.windowOnLoadCallbackProperty = 'ngx_captcha_onload_callback';\r\n        this.globalDomain = 'recaptcha.net';\r\n        this.defaultDomain = 'google.com';\r\n    }\r\n    /**\r\n     * @param {?} useGlobalDomain\r\n     * @param {?} render\r\n     * @param {?} onLoad\r\n     * @param {?=} language\r\n     * @return {?}\r\n     */\r\n    registerCaptchaScript(useGlobalDomain, render, onLoad, language) {\r\n        if (this.grecaptchaScriptLoaded()) {\r\n            // recaptcha script is already loaded\r\n            // just call the callback\r\n            this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                onLoad(window[this.windowGrecaptcha]);\r\n            }));\r\n            return;\r\n        }\r\n        // we need to patch the callback through global variable, otherwise callback is not accessible\r\n        // note: https://github.com/Enngage/ngx-captcha/issues/2\r\n        window[this.windowOnLoadCallbackProperty] = (/** @type {?} */ (((/**\r\n         * @return {?}\r\n         */\r\n        () => this.zone.run(onLoad.bind(this, window[this.windowGrecaptcha]))))));\r\n        // prepare script elem\r\n        /** @type {?} */\r\n        const scriptElem = document.createElement('script');\r\n        scriptElem.innerHTML = '';\r\n        scriptElem.src = this.getCaptchaScriptUrl(useGlobalDomain, render, language);\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n        // add script to header\r\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    cleanup() {\r\n        window[this.windowOnLoadCallbackProperty] = undefined;\r\n        window[this.windowGrecaptcha] = undefined;\r\n    }\r\n    /**\r\n     * Indicates if google recaptcha script is available and ready to be used\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    grecaptchaScriptLoaded() {\r\n        if (window[this.windowOnLoadCallbackProperty] && window[this.windowGrecaptcha]) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Gets language param used in script url\r\n     * @private\r\n     * @param {?=} hl\r\n     * @return {?}\r\n     */\r\n    getLanguageParam(hl) {\r\n        if (!hl) {\r\n            return '';\r\n        }\r\n        return `&hl=${hl}`;\r\n    }\r\n    /**\r\n     * Url to google api script\r\n     * @private\r\n     * @param {?} useGlobalDomain\r\n     * @param {?} render\r\n     * @param {?=} language\r\n     * @return {?}\r\n     */\r\n    getCaptchaScriptUrl(useGlobalDomain, render, language) {\r\n        /** @type {?} */\r\n        const domain = useGlobalDomain ? this.globalDomain : this.defaultDomain;\r\n        // tslint:disable-next-line:max-line-length\r\n        return `https://www.${domain}/recaptcha/api.js?onload=${this.windowOnLoadCallbackProperty}&render=${render}${this.getLanguageParam(language)}`;\r\n    }\r\n}\nScriptService.ɵfac = function ScriptService_Factory(t) { return new (t || ScriptService)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nScriptService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ScriptService, factory: ScriptService.ɵfac });\r\n/** @nocollapse */\r\nScriptService.ctorParameters = () => [\r\n    { type: NgZone }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScriptService, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc0.NgZone }]; }, null); })();\r\nif (false) {\r\n    /**\r\n     * Name of the global google recaptcha script\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ScriptService.prototype.windowGrecaptcha;\r\n    /**\r\n     * Name of the global callback\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ScriptService.prototype.windowOnLoadCallbackProperty;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ScriptService.prototype.globalDomain;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ScriptService.prototype.defaultDomain;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ScriptService.prototype.zone;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/base-recaptcha.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @abstract\r\n */\r\nclass BaseReCaptchaComponent {\r\n    /**\r\n     * @protected\r\n     * @param {?} renderer\r\n     * @param {?} zone\r\n     * @param {?} injector\r\n     * @param {?} scriptService\r\n     */\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n         * Prefix of the captcha element\r\n         */\r\n        this.captchaElemPrefix = 'ngx_captcha_id_';\r\n        this.setupCaptcha = true;\r\n        /**\r\n         * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n         */\r\n        this.useGlobalDomain = false;\r\n        /**\r\n         * Type\r\n         */\r\n        this.type = 'image';\r\n        /**\r\n         * Tab index\r\n         */\r\n        this.tabIndex = 0;\r\n        /**\r\n         * Called when captcha receives successful response.\r\n         * Captcha response token is passed to event.\r\n         */\r\n        this.success = new EventEmitter();\r\n        /**\r\n         * Called when captcha is loaded. Event receives id of the captcha\r\n         */\r\n        this.load = new EventEmitter();\r\n        /**\r\n         * Called when captcha is reset.\r\n         */\r\n        this.reset = new EventEmitter();\r\n        /**\r\n         * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n         */\r\n        this.ready = new EventEmitter();\r\n        /**\r\n         * Error callback\r\n         */\r\n        this.error = new EventEmitter();\r\n        /**\r\n         * Expired callback\r\n         */\r\n        this.expire = new EventEmitter();\r\n        /**\r\n         * Indicates if captcha should be set on load\r\n         */\r\n        this.setupAfterLoad = false;\r\n        /**\r\n         * If enabled, captcha will reset after receiving success response. This is useful\r\n         * when invisible captcha need to be resolved multiple times on same page\r\n         */\r\n        this.resetCaptchaAfterSuccess = false;\r\n        /**\r\n         * Indicates if captcha is loaded\r\n         */\r\n        this.isLoaded = false;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterViewInit() {\r\n        this.control = this.injector.get(NgControl).control;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterViewChecked() {\r\n        if (this.setupCaptcha) {\r\n            this.setupCaptcha = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        // cleanup scripts if language changed because they need to be reloaded\r\n        if (changes && changes.hl) {\r\n            // cleanup scripts when language changes\r\n            if (!changes.hl.firstChange && (changes.hl.currentValue !== changes.hl.previousValue)) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n        if (changes && changes.useGlobalDomain) {\r\n            // cleanup scripts when domain changes\r\n            if (!changes.useGlobalDomain.firstChange && (changes.useGlobalDomain.currentValue !== changes.useGlobalDomain.previousValue)) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n        this.setupCaptcha = true;\r\n    }\r\n    /**\r\n     * Gets captcha response as per reCaptcha docs\r\n     * @return {?}\r\n     */\r\n    getResponse() {\r\n        return this.reCaptchaApi.getResponse(this.captchaId);\r\n    }\r\n    /**\r\n     * Gets Id of captcha widget\r\n     * @return {?}\r\n     */\r\n    getCaptchaId() {\r\n        return this.captchaId;\r\n    }\r\n    /**\r\n     * Resets captcha\r\n     * @return {?}\r\n     */\r\n    resetCaptcha() {\r\n        this.zone.run((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            // reset captcha using Google js api\r\n            this.reCaptchaApi.reset();\r\n            // required due to forms\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n            // trigger reset event\r\n            this.reset.next();\r\n        }));\r\n    }\r\n    /**\r\n     * Gets last submitted captcha response\r\n     * @return {?}\r\n     */\r\n    getCurrentResponse() {\r\n        return this.currentResponse;\r\n    }\r\n    /**\r\n     * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n     * @return {?}\r\n     */\r\n    reloadCaptcha() {\r\n        this.setupComponent();\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} captchaElemId\r\n     * @return {?}\r\n     */\r\n    ensureCaptchaElem(captchaElemId) {\r\n        /** @type {?} */\r\n        const captchaElem = document.getElementById(captchaElemId);\r\n        if (!captchaElem) {\r\n            throw Error(`Captcha element with id '${captchaElemId}' was not found`);\r\n        }\r\n        // assign captcha alem\r\n        this.captchaElem = captchaElem;\r\n    }\r\n    /**\r\n     * Responsible for instantiating captcha element\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    renderReCaptcha() {\r\n        // run outside angular zone due to timeout issues when testing\r\n        // details: https://github.com/Enngage/ngx-captcha/issues/26\r\n        this.zone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.captchaId = this.reCaptchaApi.render(this.captchaElemId, this.getCaptchaProperties());\r\n            this.ready.next();\r\n        }));\r\n    }\r\n    /**\r\n     * Called when captcha receives response\r\n     * @protected\r\n     * @param {?} callback Callback\r\n     * @return {?}\r\n     */\r\n    handleCallback(callback) {\r\n        this.currentResponse = callback;\r\n        this.success.next(callback);\r\n        this.zone.run((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.onChange(callback);\r\n            this.onTouched(callback);\r\n        }));\r\n        if (this.resetCaptchaAfterSuccess) {\r\n            this.resetCaptcha();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    getPseudoUniqueNumber() {\r\n        return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    setupComponent() {\r\n        // captcha specific setup\r\n        this.captchaSpecificSetup();\r\n        // create captcha wrapper\r\n        this.createAndSetCaptchaElem();\r\n        this.scriptService.registerCaptchaScript(this.useGlobalDomain, 'explicit', (/**\r\n         * @param {?} grecaptcha\r\n         * @return {?}\r\n         */\r\n        (grecaptcha) => {\r\n            this.onloadCallback(grecaptcha);\r\n        }), this.hl);\r\n    }\r\n    /**\r\n     * Called when google's recaptcha script is ready\r\n     * @private\r\n     * @param {?} grecapcha\r\n     * @return {?}\r\n     */\r\n    onloadCallback(grecapcha) {\r\n        // assign reference to reCaptcha Api once its loaded\r\n        this.reCaptchaApi = grecapcha;\r\n        if (!this.reCaptchaApi) {\r\n            throw Error(`ReCaptcha Api was not initialized correctly`);\r\n        }\r\n        // loaded flag\r\n        this.isLoaded = true;\r\n        // fire load event\r\n        this.load.next();\r\n        // render captcha\r\n        this.renderReCaptcha();\r\n        // setup component if it was flagged as such\r\n        if (this.setupAfterLoad) {\r\n            this.setupAfterLoad = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    generateNewElemId() {\r\n        return this.captchaElemPrefix + this.getPseudoUniqueNumber();\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    createAndSetCaptchaElem() {\r\n        // generate new captcha id\r\n        this.captchaElemId = this.generateNewElemId();\r\n        if (!this.captchaElemId) {\r\n            throw Error(`Captcha elem Id is not set`);\r\n        }\r\n        if (!this.captchaWrapperElem) {\r\n            throw Error(`Captcha DOM element is not initialized`);\r\n        }\r\n        // remove old html\r\n        this.captchaWrapperElem.nativeElement.innerHTML = '';\r\n        // create new wrapper for captcha\r\n        /** @type {?} */\r\n        const newElem = this.renderer.createElement('div');\r\n        newElem.id = this.captchaElemId;\r\n        this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\r\n        // when use captcha in cdk stepper then throwing error Captcha element with id 'ngx_captcha_id_XXXX' not found\r\n        // to fix it checking ensureCaptchaElem in timeout so that its check in next call and its able to find element\r\n        setTimeout((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            // update captcha elem\r\n            if (this.captchaElemId) {\r\n                this.ensureCaptchaElem(this.captchaElemId);\r\n            }\r\n        }), 0);\r\n    }\r\n    /**\r\n     * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n     * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\r\n    writeValue(obj) { }\r\n    /**\r\n     * This method helps us tie together recaptcha and our formControl values\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) {\r\n        this.onChange = fn;\r\n    }\r\n    /**\r\n     * At some point we might be interested whether the user has touched our component\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) {\r\n        this.onTouched = fn;\r\n    }\r\n    /**\r\n     * Handles error callback\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    handleErrorCallback() {\r\n        this.zone.run((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n        }));\r\n        this.error.next();\r\n    }\r\n    /**\r\n     * Handles expired callback\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    handleExpireCallback() {\r\n        this.expire.next();\r\n        // reset captcha on expire callback\r\n        this.resetCaptcha();\r\n    }\r\n}\nBaseReCaptchaComponent.ɵfac = function BaseReCaptchaComponent_Factory(t) { return new (t || BaseReCaptchaComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ScriptService)); };\nBaseReCaptchaComponent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: BaseReCaptchaComponent, inputs: { useGlobalDomain: \"useGlobalDomain\", type: \"type\", tabIndex: \"tabIndex\", siteKey: \"siteKey\", hl: \"hl\" }, outputs: { success: \"success\", load: \"load\", reset: \"reset\", ready: \"ready\", error: \"error\", expire: \"expire\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\r\n/** @nocollapse */\r\nBaseReCaptchaComponent.ctorParameters = () => [\r\n    { type: Renderer2 },\r\n    { type: NgZone },\r\n    { type: Injector },\r\n    { type: ScriptService }\r\n];\r\nBaseReCaptchaComponent.propDecorators = {\r\n    siteKey: [{ type: Input }],\r\n    useGlobalDomain: [{ type: Input }],\r\n    type: [{ type: Input }],\r\n    hl: [{ type: Input }],\r\n    tabIndex: [{ type: Input }],\r\n    success: [{ type: Output }],\r\n    load: [{ type: Output }],\r\n    reset: [{ type: Output }],\r\n    ready: [{ type: Output }],\r\n    error: [{ type: Output }],\r\n    expire: [{ type: Output }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseReCaptchaComponent, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Injector }, { type: ScriptService }]; }, { useGlobalDomain: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], tabIndex: [{\n            type: Input\n        }], success: [{\n            type: Output\n        }], load: [{\n            type: Output\n        }], reset: [{\n            type: Output\n        }], ready: [{\n            type: Output\n        }], error: [{\n            type: Output\n        }], expire: [{\n            type: Output\n        }], siteKey: [{\n            type: Input\n        }], hl: [{\n            type: Input\n        }] }); })();\r\nif (false) {\r\n    /**\r\n     * Prefix of the captcha element\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.captchaElemPrefix;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    BaseReCaptchaComponent.prototype.setupCaptcha;\r\n    /**\r\n     * Google's site key.\r\n     * You can find this under https://www.google.com/recaptcha\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.siteKey;\r\n    /**\r\n     * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.useGlobalDomain;\r\n    /**\r\n     * Type\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.type;\r\n    /**\r\n     * Language code. Auto-detects the user's language if unspecified.\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.hl;\r\n    /**\r\n     * Tab index\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.tabIndex;\r\n    /**\r\n     * Called when captcha receives successful response.\r\n     * Captcha response token is passed to event.\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.success;\r\n    /**\r\n     * Called when captcha is loaded. Event receives id of the captcha\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.load;\r\n    /**\r\n     * Called when captcha is reset.\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.reset;\r\n    /**\r\n     * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.ready;\r\n    /**\r\n     * Error callback\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.error;\r\n    /**\r\n     * Expired callback\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.expire;\r\n    /** @type {?} */\r\n    BaseReCaptchaComponent.prototype.captchaWrapperElem;\r\n    /**\r\n     * Indicates if captcha should be set on load\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    BaseReCaptchaComponent.prototype.setupAfterLoad;\r\n    /**\r\n     * Captcha element\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.captchaElem;\r\n    /**\r\n     * Id of the captcha elem\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.captchaId;\r\n    /**\r\n     * Holds last response value\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.currentResponse;\r\n    /**\r\n     * If enabled, captcha will reset after receiving success response. This is useful\r\n     * when invisible captcha need to be resolved multiple times on same page\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.resetCaptchaAfterSuccess;\r\n    /**\r\n     * Captcha type\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.recaptchaType;\r\n    /**\r\n     * Required by ControlValueAccessor\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.onChange;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.onTouched;\r\n    /**\r\n     * Indicates if captcha is loaded\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.isLoaded;\r\n    /**\r\n     * Reference to global reCaptcha API\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.reCaptchaApi;\r\n    /**\r\n     * Id of the DOM element wrapping captcha\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.captchaElemId;\r\n    /**\r\n     * Form Control to be enable usage in reactive forms\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.control;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.renderer;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.zone;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.injector;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.scriptService;\r\n    /**\r\n     * Gets reCaptcha properties\r\n     * @abstract\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.getCaptchaProperties = function () { };\r\n    /**\r\n     * Used for captcha specific setup\r\n     * @abstract\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.captchaSpecificSetup = function () { };\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/models/recaptcha-type.enum.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @enum {number} */\r\nconst ReCaptchaType = {\r\n    InvisibleReCaptcha: 0,\r\n    ReCaptcha2: 1,\r\n};\r\nReCaptchaType[ReCaptchaType.InvisibleReCaptcha] = 'InvisibleReCaptcha';\r\nReCaptchaType[ReCaptchaType.ReCaptcha2] = 'ReCaptcha2';\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/invisible-recaptcha.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass InvisibleReCaptchaComponent extends BaseReCaptchaComponent {\r\n    /**\r\n     * @param {?} renderer\r\n     * @param {?} zone\r\n     * @param {?} injector\r\n     * @param {?} scriptService\r\n     */\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        super(renderer, zone, injector, scriptService);\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n         * This size representing invisible captcha\r\n         */\r\n        this.size = 'invisible';\r\n        /**\r\n         * Theme\r\n         */\r\n        this.theme = 'light';\r\n        /**\r\n         * Badge\r\n         */\r\n        this.badge = 'bottomright';\r\n        this.recaptchaType = ReCaptchaType.InvisibleReCaptcha;\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n    }\r\n    /**\r\n     * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n     * @return {?}\r\n     */\r\n    execute() {\r\n        // execute captcha\r\n        this.zone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => this.reCaptchaApi.execute(this.captchaId)));\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    captchaSpecificSetup() {\r\n    }\r\n    /**\r\n     * Gets reCaptcha properties\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    getCaptchaProperties() {\r\n        return {\r\n            'sitekey': this.siteKey,\r\n            'callback': (/**\r\n             * @param {?} response\r\n             * @return {?}\r\n             */\r\n            (response) => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleCallback(response)))),\r\n            'expired-callback': (/**\r\n             * @return {?}\r\n             */\r\n            () => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleExpireCallback()))),\r\n            'error-callback': (/**\r\n             * @return {?}\r\n             */\r\n            () => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleErrorCallback()))),\r\n            'badge': this.badge,\r\n            'type': this.type,\r\n            'tabindex': this.tabIndex,\r\n            'size': this.size,\r\n            'theme': this.theme\r\n        };\r\n    }\r\n}\nInvisibleReCaptchaComponent.ɵfac = function InvisibleReCaptchaComponent_Factory(t) { return new (t || InvisibleReCaptchaComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ScriptService)); };\nInvisibleReCaptchaComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: InvisibleReCaptchaComponent, selectors: [[\"ngx-invisible-recaptcha\"]], viewQuery: function InvisibleReCaptchaComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.captchaWrapperElem = _t.first);\n    } }, inputs: { theme: \"theme\", badge: \"badge\", hl: \"hl\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(( /**\n                 * @return {?}\n                 */() => InvisibleReCaptchaComponent)),\n                multi: true\n            }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 0, consts: [[\"captchaWrapperElem\", \"\"]], template: function InvisibleReCaptchaComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", null, 0);\n    } }, encapsulation: 2 });\r\n/** @nocollapse */\r\nInvisibleReCaptchaComponent.ctorParameters = () => [\r\n    { type: Renderer2 },\r\n    { type: NgZone },\r\n    { type: Injector },\r\n    { type: ScriptService }\r\n];\r\nInvisibleReCaptchaComponent.propDecorators = {\r\n    theme: [{ type: Input }],\r\n    badge: [{ type: Input }],\r\n    hl: [{ type: Input }],\r\n    captchaWrapperElem: [{ type: ViewChild, args: ['captchaWrapperElem', { static: false },] }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InvisibleReCaptchaComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-invisible-recaptcha',\n                template: `\r\n  <div #captchaWrapperElem></div>`,\n                providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(( /**\n                         * @return {?}\n                         */() => InvisibleReCaptchaComponent)),\n                        multi: true\n                    }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Injector }, { type: ScriptService }]; }, { theme: [{\n            type: Input\n        }], badge: [{\n            type: Input\n        }], hl: [{\n            type: Input\n        }], captchaWrapperElem: [{\n            type: ViewChild,\n            args: ['captchaWrapperElem', { static: false }]\n        }] }); })();\r\nif (false) {\r\n    /**\r\n     * This size representing invisible captcha\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.size;\r\n    /**\r\n     * Theme\r\n     * @type {?}\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.theme;\r\n    /**\r\n     * Badge\r\n     * @type {?}\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.badge;\r\n    /**\r\n     * Language code. Auto-detects the user's language if unspecified.\r\n     * @type {?}\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.hl;\r\n    /** @type {?} */\r\n    InvisibleReCaptchaComponent.prototype.captchaWrapperElem;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.recaptchaType;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.renderer;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.zone;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.injector;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.scriptService;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/recaptcha-2.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass ReCaptcha2Component extends BaseReCaptchaComponent {\r\n    /**\r\n     * @param {?} renderer\r\n     * @param {?} zone\r\n     * @param {?} injector\r\n     * @param {?} scriptService\r\n     */\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        super(renderer, zone, injector, scriptService);\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n         * Name of the global expire callback\r\n         */\r\n        this.windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\r\n        /**\r\n         * Name of the global error callback\r\n         */\r\n        this.windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\r\n        /**\r\n         * Theme\r\n         */\r\n        this.theme = 'light';\r\n        /**\r\n         * Size\r\n         */\r\n        this.size = 'normal';\r\n        this.recaptchaType = ReCaptchaType.ReCaptcha2;\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        window[this.windowOnErrorCallbackProperty] = {};\r\n        window[this.windowOnExpireCallbackProperty] = {};\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    captchaSpecificSetup() {\r\n        this.registerCallbacks();\r\n    }\r\n    /**\r\n     * Gets reCaptcha properties\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    getCaptchaProperties() {\r\n        return {\r\n            'sitekey': this.siteKey,\r\n            'callback': (/**\r\n             * @param {?} response\r\n             * @return {?}\r\n             */\r\n            (response) => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleCallback(response)))),\r\n            'expired-callback': (/**\r\n             * @return {?}\r\n             */\r\n            () => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleExpireCallback()))),\r\n            'error-callback': (/**\r\n             * @return {?}\r\n             */\r\n            () => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleErrorCallback()))),\r\n            'theme': this.theme,\r\n            'type': this.type,\r\n            'size': this.size,\r\n            'tabindex': this.tabIndex\r\n        };\r\n    }\r\n    /**\r\n     * Registers global callbacks\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    registerCallbacks() {\r\n        window[this.windowOnErrorCallbackProperty] = super.handleErrorCallback.bind(this);\r\n        window[this.windowOnExpireCallbackProperty] = super.handleExpireCallback.bind(this);\r\n    }\r\n}\nReCaptcha2Component.ɵfac = function ReCaptcha2Component_Factory(t) { return new (t || ReCaptcha2Component)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ScriptService)); };\nReCaptcha2Component.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ReCaptcha2Component, selectors: [[\"ngx-recaptcha2\"]], viewQuery: function ReCaptcha2Component_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.captchaWrapperElem = _t.first);\n    } }, inputs: { theme: \"theme\", size: \"size\", hl: \"hl\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(( /**\n                 * @return {?}\n                 */() => ReCaptcha2Component)),\n                multi: true\n            }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 0, consts: [[\"captchaWrapperElem\", \"\"]], template: function ReCaptcha2Component_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", null, 0);\n    } }, encapsulation: 2 });\r\n/** @nocollapse */\r\nReCaptcha2Component.ctorParameters = () => [\r\n    { type: Renderer2 },\r\n    { type: NgZone },\r\n    { type: Injector },\r\n    { type: ScriptService }\r\n];\r\nReCaptcha2Component.propDecorators = {\r\n    theme: [{ type: Input }],\r\n    size: [{ type: Input }],\r\n    hl: [{ type: Input }],\r\n    captchaWrapperElem: [{ type: ViewChild, args: ['captchaWrapperElem', { static: false },] }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReCaptcha2Component, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-recaptcha2',\n                template: `\r\n  <div #captchaWrapperElem></div>`,\n                providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(( /**\n                         * @return {?}\n                         */() => ReCaptcha2Component)),\n                        multi: true\n                    }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Injector }, { type: ScriptService }]; }, { theme: [{\n            type: Input\n        }], size: [{\n            type: Input\n        }], hl: [{\n            type: Input\n        }], captchaWrapperElem: [{\n            type: ViewChild,\n            args: ['captchaWrapperElem', { static: false }]\n        }] }); })();\r\nif (false) {\r\n    /**\r\n     * Name of the global expire callback\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.windowOnErrorCallbackProperty;\r\n    /**\r\n     * Name of the global error callback\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.windowOnExpireCallbackProperty;\r\n    /**\r\n     * Theme\r\n     * @type {?}\r\n     */\r\n    ReCaptcha2Component.prototype.theme;\r\n    /**\r\n     * Size\r\n     * @type {?}\r\n     */\r\n    ReCaptcha2Component.prototype.size;\r\n    /**\r\n     * Language code. Auto-detects the user's language if unspecified.\r\n     * @type {?}\r\n     */\r\n    ReCaptcha2Component.prototype.hl;\r\n    /** @type {?} */\r\n    ReCaptcha2Component.prototype.captchaWrapperElem;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.recaptchaType;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.renderer;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.zone;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.injector;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.scriptService;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/services/recaptcha_v3.service.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass ReCaptchaV3Service {\r\n    /**\r\n     * @param {?} scriptService\r\n     * @param {?} zone\r\n     */\r\n    constructor(scriptService, zone) {\r\n        this.scriptService = scriptService;\r\n        this.zone = zone;\r\n    }\r\n    /**\r\n     * Executes reCaptcha v3 with given action and passes token via callback. You need to verify\r\n     * this callback in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     *\r\n     * @param {?} siteKey Site key found in your google admin panel\r\n     * @param {?} action Action to log\r\n     * @param {?} callback Callback function to to handle token\r\n     * @param {?=} config Optional configuration like useGlobalDomain to be provided\r\n     * @param {?=} errorCallback Optional Callback function to handle errors\r\n     * @return {?}\r\n     */\r\n    execute(siteKey, action, callback, config, errorCallback) {\r\n        this.executeAsPromise(siteKey, action, config)\r\n            .then(callback)\r\n            .catch((/**\r\n         * @param {?} error\r\n         * @return {?}\r\n         */\r\n        (error) => errorCallback ? errorCallback(error) : console.error(error)));\r\n    }\r\n    /**\r\n     * Executes reCaptcha v3 with given action and returns token via Promise. You need to verify\r\n     * this token in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     *\r\n     * @param {?} siteKey Site key found in your google admin panel\r\n     * @param {?} action Action to log\r\n     * @param {?=} config\r\n     * @return {?}\r\n     */\r\n    executeAsPromise(siteKey, action, config) {\r\n        return new Promise((/**\r\n         * @param {?} resolve\r\n         * @param {?} reject\r\n         * @return {?}\r\n         */\r\n        (resolve, reject) => {\r\n            /** @type {?} */\r\n            const useGlobalDomain = config && config.useGlobalDomain ? true : false;\r\n            /** @type {?} */\r\n            const onRegister = (/**\r\n             * @param {?} grecaptcha\r\n             * @return {?}\r\n             */\r\n            grecaptcha => {\r\n                this.zone.runOutsideAngular((/**\r\n                 * @return {?}\r\n                 */\r\n                () => {\r\n                    try {\r\n                        grecaptcha\r\n                            .execute(siteKey, { action })\r\n                            .then((/**\r\n                         * @param {?} token\r\n                         * @return {?}\r\n                         */\r\n                        token => this.zone.run((/**\r\n                         * @return {?}\r\n                         */\r\n                        () => resolve(token)))));\r\n                    }\r\n                    catch (error) {\r\n                        reject(error);\r\n                    }\r\n                }));\r\n            });\r\n            this.scriptService.registerCaptchaScript(useGlobalDomain, siteKey, onRegister);\r\n        }));\r\n    }\r\n}\nReCaptchaV3Service.ɵfac = function ReCaptchaV3Service_Factory(t) { return new (t || ReCaptchaV3Service)(ɵngcc0.ɵɵinject(ScriptService), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nReCaptchaV3Service.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ReCaptchaV3Service, factory: ReCaptchaV3Service.ɵfac });\r\n/** @nocollapse */\r\nReCaptchaV3Service.ctorParameters = () => [\r\n    { type: ScriptService },\r\n    { type: NgZone }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReCaptchaV3Service, [{\n        type: Injectable\n    }], function () { return [{ type: ScriptService }, { type: ɵngcc0.NgZone }]; }, null); })();\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptchaV3Service.prototype.scriptService;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptchaV3Service.prototype.zone;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/ngx-captcha.module.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxCaptchaModule {\r\n}\nNgxCaptchaModule.ɵfac = function NgxCaptchaModule_Factory(t) { return new (t || NgxCaptchaModule)(); };\nNgxCaptchaModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxCaptchaModule });\nNgxCaptchaModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [\n        ScriptService,\n        ReCaptchaV3Service\n    ], imports: [[\n            CommonModule\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxCaptchaModule, { declarations: function () { return [ReCaptcha2Component, InvisibleReCaptchaComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ReCaptcha2Component, InvisibleReCaptchaComponent]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxCaptchaModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule\n                ],\n                declarations: [\n                    ReCaptcha2Component,\n                    InvisibleReCaptchaComponent\n                ],\n                providers: [\n                    ScriptService,\n                    ReCaptchaV3Service\n                ],\n                exports: [\n                    ReCaptcha2Component,\n                    InvisibleReCaptchaComponent\n                ]\n            }]\n    }], null, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/index.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: public_api.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: ngx-captcha.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { BaseReCaptchaComponent, InvisibleReCaptchaComponent, NgxCaptchaModule, ReCaptcha2Component, ReCaptchaType, ReCaptchaV3Service, ScriptService };\n\n//# sourceMappingURL=ngx-captcha.js.map"],"sourceRoot":"webpack:///"}